
--- Page 1 ---
Sample Transfer File
Configuration and Usage Guide
715008535
Version 00Copyright © Waters Corporation 2023
All rights reserved
--- Page 2 ---
General information
Copyright notice
© 2023 WATERS CORPORATION. PRINTED IN THE UNITED STATES OF AMERICA AND IN
IRELAND. ALL RIGHTS RESERVED. THIS DOCUMENT OR PARTS THEREOF MAY NOT BE
REPRODUCED IN ANY FORM WITHOUT THE WRITTEN PERMISSION OF THE PUBLISHER.
The information in this document is subject to change without notice and should not be construed
as a commitment by Waters Corporation. Waters Corporation assumes no responsibility for
any errors that may appear in this document. This document is believed to be complete and
accurate at the time of publication. In no event shall Waters Corporation be liable for incidental or
consequential damages in connection with, or arising from, its use. For the most recent revision
of this document, consult the Waters website ( www.waters.com ).
Trademarks
Empower ™ is a trademark of Waters Corporation.
Waters ™ is a trademark of Waters Corporation.
All other trademarks are property of their respective owners.
Customer comments
We seriously consider every customer comment we receive. Help us better understand what you
expect from our documentation so that we can continuously improve its accuracy and usability.
To report any errors that you encounter in this document or to suggest ideas for otherwise
improving it, reach us at tech_comm@waters.com .
Contacting Waters
Contact Waters with technical questions regarding the use, transportation, removal, or disposal of
any Waters product. You can reach us through the Internet, telephone, fax, or conventional mail.
Contact method Information
www.waters.com The Waters website includes contact
information for Waters locations worldwide.
March 2, 2023, 715008535 Ver. 00
Page ii
--- Page 3 ---
Contact method Information
iRequest iRequest is a secure Web service form that
allows you to request support and service
for Waters instruments and software or to
schedule a planned service activity. These
types of support and services may be included
as part of your maintenance plan or support
plan. You may be charged for the requested
service if you do not have appropriate plan
coverage for your product.
Note:  In areas managed by authorized
distributors, iRequest may not be available.
Contact your local distributor for more
information.
Local office contact information For worldwide locations, telephone, fax, and
conventional mail information is available at the
Local Offices  website.
Corporate contact information Waters Corporation
Global Support Services
34 Maple Street
Milford, MA 01757
USA
From the USA or Canada, phone
800-252-4752 or fax 508-872-1990.
March 2, 2023, 715008535 Ver. 00
Page iii
--- Page 4 ---
Table of contents
General information........................................................................................................ii
Copyright notice......................................................................................................................................ii
Trademarks.............................................................................................................................................ii
Customer comments...............................................................................................................................ii
Contacting Waters.................................................................................................................................. ii
1 Introduction..................................................................................................................5
1.1 Overview.......................................................................................................................................... 5
2 Requirements...............................................................................................................7
2.1 Accessing the code and resources.................................................................................................. 7
3 The STF example app design premise...................................................................... 8
3.1 Overview.......................................................................................................................................... 8
3.2 Designed logical flow........................................................................................................................8
3.3 Code reference details..................................................................................................................... 9
3.4 Examples of risk considerations in development decisions............................................................11
3.5 JSON file........................................................................................................................................ 12
3.5.1 JSON file overview................................................................................................................12
3.5.2 JSON file details................................................................................................................... 13
3.6 Configuration file............................................................................................................................ 16
3.6.1 Event logging........................................................................................................................ 16
3.6.2 Log file location.....................................................................................................................16
3.6.3 Sleep interval........................................................................................................................ 16
3.6.4 Instrument connection timeout..............................................................................................17
3.6.5 STF service identifier............................................................................................................ 17
3.6.6 JSON file shared folder location and credentials..................................................................17
3.6.7 Encryption of the Empower password in the JSON file........................................................ 18
3.6.8 Log file.................................................................................................................................. 18
3.6.9 Password encryption.............................................................................................................22
March 2, 2023, 715008535 Ver. 00
Page iv
--- Page 5 ---
1 Introduction
The Sample Transfer File (STF) solution is an example of how to create an interface to Waters
Empower software via the Empower Toolkit. It is designed and written exclusively for integrators
with the Waters portal.
The STF provides an example of code that will accept metadata in standard JSON format
and use this metadata to create and run sample set methods (SSMs) in Empower. It is the
responsibility of the integrator's development team to rework the code and ensure that the
resultant code meets requirements.
1.1 Overview
The example STF solution describes a service that provides the integration functionality for an
Empower Enterprise installation. The example is written in C# language and its functionality is
well defined in comments.
A set of Help files are also provided to assist the developer. The example runs on the same
machine as the Empower client, and it accesses either a local folder or a network share for the
location of the JSON file.
The following diagram shows a simplified overview of an Empower Enterprise installation. The
example solution, shown in green (STF Service), communicates via the Empower Toolkit. This
solution resides on any system where the Empower client software is installed.
March 2, 2023, 715008535 Ver. 00
Page 5
--- Page 6 ---
Figure 1–1: Sample Transfer File Solution
March 2, 2023, 715008535 Ver. 00
Page 6
--- Page 7 ---
2 Requirements
The STF Example requires Empower 3 FR4 or later versions. For a development environment it
requires .NET Framework 4.8 or later.
2.1 Accessing the code and resources
The code will be available from Waters.
You must check out the code, open it in Microsoft Visual Studio 2017 (or above), and then build
for x86 systems. The Empower Toolkit is 32-bit, so building for x86 is important.
A wrapper-type layer of code deals with the Toolkit calls and a layer of application code provides
the functionality. This important concept provides a layer of field verification before the call is
made to Toolkit, and it reduces the number of unhandled exceptions and errors due to invalid
calls.
March 2, 2023, 715008535 Ver. 00
Page 7
--- Page 8 ---
3 The STF example app design premise
3.1 Overview
The STF example application uses "new" JSON files as a method for transferring metadata
between an integrator application and Empower. The STF was designed to periodically check
a shared folder location for new JSON files and then process the files. The STF deserializes
the JSON file and parses the metadata. The STF logs in to an Empower project using the
Empower Toolkit and either creates new Sample Set Methods (SSMs) from base SSMs that exist
in Empower or updates existing SSMs in the Empower System queue.
These SSMs can then be added to the Empower queue to run on the Portal-enabled system that
the integrator is handling. The STF example writes back to the JSON file reports that can be read
by the integrator software and detect the success or failure of the processed file for each SSM
job.
The process can be visualized as the JSON file name progresses from new through lck to prc
when successful, or to error  when not successful. Additionally, a log file example is provided as a
human-readable record of the process to troubleshoot the failures.
3.2 Designed logical flow
The following diagram provides an overview of the STF process:
March 2, 2023, 715008535 Ver. 00
Page 8
--- Page 9 ---
Figure 3–1: Logical flow of STF process
3.3 Code reference details
The following diagram provides a code reference during the STF process:
March 2, 2023, 715008535 Ver. 00
Page 9
--- Page 10 ---
Figure 3–2: Code reference
March 2, 2023, 715008535 Ver. 00
Page 10
--- Page 11 ---
3.4 Examples of risk considerations in development
decisions
Risks Risk description
List all steps that require comments and set
default strings.A step that should require a comment is not
configured.
Test pausing an existing run, updating, and
restarting.Test cannot be paused, updated, and restarted
Managing DLLs to ensure maximum support
ability of all apps and minimum carryover of
unwanted code.Poor lifecycle support.
Manually create JSON file in format. Cannot read JSON file.
STF service that checks file share on a
configurable basis.Service does not check file share or does not
check frequently enough.
STF service reads JSON file and verifies
contents.Verification can only occur on mandatory fields;
additional fields cannot be verified and could be
incorrect in format.
Read user credentials only from the JSON file. Cannot read user credentials.
Set up share and permissions. Permissions do not work as expected in
"production" environment.
Create a separate executable initiated from
outside Empower.
Error handling and logging for login. Fails to log in and not logged.
The STF service needs to add comments with
all saves.A step that should require a comment is not
configured.
Handle issues. The STF service needs to alter
a sample set in the queue or a running sample
set.Missing error handling in any of multiple steps:
connecting to instrument, pausing sample,
resuming SSM, updating SSM, saving SSM,
removing from queue, adding to queue,
updating log files, updating trailer.
The STF service needs to send the SSM to the
system.Service fails to send SSM to the queue without
handling.
The STF service needs to write to the JSON
file.Service fails to write to the JSON file.
The STF service needs to write log files. Log file fails to write.
The STF service needs to support all run types. The run type set in JSON file is not compatible.
March 2, 2023, 715008535 Ver. 00
Page 11
--- Page 12 ---
3.5 JSON file
3.5.1 JSON file overview
The JSON file contains the information for Empower and Empower login, the specific system
used by the integrator, and the metadata for the SSMs.
The following page shows an example "new" JSON file as expected from a
proposed integrator application. The naming convention for the JSON file is
<Integrator_ID string >_<STF_ID string >_<creation_Timestamp YYMMDD_hhmm >.new.json.
The minimum fields are used in the samples array in this example. The example STF is designed
to handle the samples array where each object transposes to a sample line in the SSM. The
sample objects consist of string value pairs that must be the same as the sample type fields in
Empower.
{
    "HeaderFields": {
        "EmpowerProject": "a_project\\Defaults_OAI1",
        "EmpowerDatabase": "TEST",
        "EmpowerUn": "system",
        "EmpowerPw": "manager",
        "System": "UPLC_2",
        "Node": "LACE_1",
        "SampleSets": 2
    },
    "SampleSetDetails": [
        {
            "BaseSampleSetMethodName": "STF_base_SSM1",
            "SampleSetName": "test_2610202_16",
            "ExperimentId": 567,
            "NumberOfSamples": 3,
            "New": true,
            "Samples": [
                {
                    "LineNumber": 1,
                    "Function": "Inject Standards",
                    "Vial": "1:A,1",
                    "SampleName": "abc1",
                    "InjVol": 1.0,
                    "RunTime": 1.0
                },
                {
                    "LineNumber": 2,
                    "Function": "Inject Samples",
                    "Vial": "1:A,2",
                    "SampleName": "abc2",
                    "InjVol": 2.0,
                    "RunTime": 2.0
                },
March 2, 2023, 715008535 Ver. 00
Page 12
--- Page 13 ---
                {
                    "LineNumber": 3,
                    "Function": "Inject Samples",
                    "Vial": "1:A,3",
                    "SampleName": "abc3",
                    "InjVol": 3.0,
                    "RunTime": 3.0
                }
                
            ],
            "Status": null,
            "SampleSetMethodRunReport": null
        }
    ]
    "TrailerReport": {
        "FileVerified": false,
        "FileProcessed": false,
        "FileStatus": "Not started",
        "FileProcessReport": null
    }
}
3.5.2 JSON file details
This section contains the steps through the arrays, objects, and string value pairs in the JSON
file. Refer to the code to understand how each one is used in detail and if additional data and
validation are required.
3.5.2.1 HeaderFields object
The object contains the file processing information to log in to Empower and the number of
sample sets to process.
• EmpowerProject: The value is a string that must contain the full path to the Empower project
where the base SSM exists and the resultant SSM will be saved and run. It is case and
spelling sensitive and is validated only on login.
• EmpowerDatabase: The value is a string that is the database instance alias used for
Empower login.
• EmpowerUn: The value is a string, and it is the username for the Empower user required
to run the SSM. This user must have suitable privileges and access to perform the required
tasks but must also be restricted significantly for security.
• EmpowerPw: The value is a string that can be plain text or encrypted. Encryption is
determined by the key "EmpowerJSONpwEncrypted " in the configuration file.
• System: The value is a string that is the Empower chromatographic system to which the
integrator is connected.
March 2, 2023, 715008535 Ver. 00
Page 13
--- Page 14 ---
• Node: The value is a string that is the Empower LAC/E or acquisition server to which the
chromatographic system loaded by the integrator is connected.
• SampleSets: The value is an integer that describes the number of sample sets to be created
and run in Empower. This number must be equal to the number of SSMs described in the
"SampleSetDetails" array.
3.5.2.2 SampleSetDetails array
The array contains the details that are required to update or create a SSM in Empower.
• BaseSampleSetMethodName: The value is a string, and it must be equal to the name of the
base sample set method that exists in Empower. It is verified when searched.
• SampleSetName: The value is a string, and it is used as the new SSM created in Empower.
If the name already exists in the Empower project, a suffix of _2 is added to the name.
Empower can handle the same name and new versions of SSMs, but this is not designed in
the code example. This is also the name that is used for the resultant sample set. Empower
will support different naming for the sample set, but this is not designed in the code example.
• NumberOfSamples: The value is an integer, and it must be equal to the number of samples in
the samples array.
• New: The value is Boolean (true/false) and determines if the process will follow the flow of
a new SSM (true) or update an existing SSM (false). When the value is true , all injected
sample rows are required in the order they are to be injected. When the value is false ,
the additional injected sample rows are required in the order they are to be injected; the
additional rows would be added to the end of a SSM that could either be in the Empower
system queue or currently running on the system. The example includes a check that the
running sample set has not passed the last injection row. If the SSM has passed the last
row or has been completed (and is no longer present in the queue), a new SSM is created
using the completed SSM as the base SSM, saved with the incremental suffix and sent to
the system. It is important to understand what checks are required in the code to prevent
incorrect handling under "exception" circumstances (for example, if the first SSM failed to
run).
3.5.2.3 Samples array
The samples array is an array nested within the SampleSetDetails array that describes each
sample and contains the metadata for each line of the new SSM. The minimum fields required
are LineNumber, Function, Vial, SampleName, InjVol, and RunTime. Additional fields that are
required for the resultant SSM must be added to the samples array in the exact spelling and case
as in Empower or as populated in the base SSM. Validation of both field name and format for
additional fields is not completed in the STF example and requires careful design consideration to
prevent failure.
• LineNumber: The value is an integer and an arbitrary field.
• Function: The value is a string and must equal the function that is required in Empower.
The STF example is designed to handle Inject Standards and Inject Samples and to retain
March 2, 2023, 715008535 Ver. 00
Page 14
--- Page 15 ---
the positions in the final SSM. Non-inject rows at the start and end of the base SSM are
also preserved. Consideration must be given to support all functions allowed in Empower to
handle exceptions and prevent failure.
• Vial: The value is a string and must have the correct format for the plate type used. The plate
type must also be present in the base SSM in Empower. Validation back to Empower must be
considered to avoid a failure due to incorrect plate type, format, or position.
• SampleName: The value is a string and is the sample name.
• InjVol: The value is a number (float) and is the injection volume in µL for the sample.
• RunTime: The value is a number (float) and is the run time in minutes for the sample.
• Status: The value is a string, either null or a Failed or Completed string. The status is null
when the file is new or when it fails initial steps such as file verification, deserialization, or
connection to the Empower project or system. The status is Failed when there is an issue
with the base SSM or when the SSM cannot be saved for some reason. The status is
Completed when the SSM is successfully saved and sent to the system. If there is a failure
due to deserialization or reserialization of the file, this value would be unchanged.
• SampleSetMethodRunReport: The value is a string, either null or a message string. The
message string indicates the success or failure of the creation, saving, and submitting of the
SSM. The name of the SSM is also reported. If there is a failure due to deserialization or
reserialization of the file, this value would be unchanged.
3.5.2.4 TrailerReport object
This object contains the processed file information. If there is a failure due to deserialization or
reserialization of the file, this object is unchanged.
• FileVerified: The value is Boolean (true/false) and reports whether the verified fields are
correct.
• FileProcessed: The value is Boolean (true/false) and reports whether the file was processed
or not. The STF example design reports true even if it was processed and the SSM failed.
• FileStatus: The value is a string and Not started , Failed , or Completed  status are
also strings. The STF example design reports Failed  when the file had a failure during
processing. It reports Completed  when the file was processed without failure, regardless of
whether the individual SSM completed or failed.
• FileProcessReport: The value is a string that can be null  or a message string. The message
string indicates the Success  or Failure  of file processing. If the file has Completed , the
string includes a summary of the number of SSMs processed along with the number of
successes and failures.
March 2, 2023, 715008535 Ver. 00
Page 15
--- Page 16 ---
3.6 Configuration file
The configuration file ( SFTTest.exe.config ) contains the non-hardcoded information required
to run the example STF. The following page shows the application settings section of the
configuration file, followed by a description of each key-value pair.
<appSettings>
    <add key="EventLogName" value="Application" />
    <add key="EventLogSourceName" value="STF Service" />
    <add key="LogFileNamePath" value="c:\STF\stfService.log" />
    <add key="TimerInterval" value="15000" />
    <!--5min=1000*60*5 (ms)-->
    <add key="ServiceMonitorApp" value="STFServiceMonitor" />
    <add key="InstrumentConnectionTimeOut" value="4" />
    <!-- in seconds -->
    <add key="ServiceId" value="01" />
    <add key="STF_JsonDirectoryPath" value="C:\STF" />
    <add key="STF_JsonDirectoryUserName" value="Administrator" />
    <add key="STF_JsonDirectoryPassword" 
value="EAAAABrr9+MostHC4aldXRZl7DtgTQlxHzNUeCgRlNt4dweN" />
    <add key="STF_JsonDirectoryDomain" value="server08a" />
    <add key="EmpowerJSONpwEncrypted" value="false" />
  </appSettings>
Here is a step-through of the key value pairs in the config file. Refer to the code to understand
how each pair is used.
3.6.1 Event logging
These two keys describe the logging to the Windows event logs:
<add key="EventLogName" value="Application" />
    <add key="EventLogSourceName" value="STF Service" />
3.6.2 Log file location
To set the location of the log file:
<add key="LogFileNamePath" value="c:\STF\stfService.log" />
     
3.6.3 Sleep interval
Set the timer interval in milliseconds for the application to sleep in between checking for new
JSON files. With automation applications it is important to make sure that iterations do not hang
March 2, 2023, 715008535 Ver. 00
Page 16
--- Page 17 ---
or keep running for longer periods and then collide or cause a permanent inactive state. The
example STF uses a simple busy flag that is set to true when it starts a job.
This flag is only set to false when the job is complete. If the flag remains as busy when the next
iteration is about to start (according to the TimerInterval value), the STF Example is designed to
check the start time of the previous job and determine if the job should continue or halt.
<add key="TimerInterval" value="15000" />
    <!--5min=1000*60*5 (ms)-->
ServiceMonitor
    <add key="ServiceMonitorApp" value="STFServiceMonitor" />
Not used.
3.6.4 Instrument connection timeout
This key is used to set the instrument connection timeout for connections to systems in Empower.
It is not uncommon for systems to be unavailable on the Empower network, due to either
exceptions or planned events. The latency of system connections depends on the installed
environment and can vary from one second to one minute. Any resultant code must handle the
system connections that fail to complete or have low or high latency.
<add key="InstrumentConnectionTimeOut" value="4" />
    <!-- in seconds -->
3.6.5 STF service identifier
The STF service identifier is used to identify an STF service. It can also be used for scalability.
<add key="ServiceId" value="01" />
3.6.6 JSON file shared folder location and credentials
These keys describe the shared folder where the JSON file is placed by the integrator
application. This can be a local or remote network share. The password is encrypted using the
Rijndael algorithm. A domain user with suitable access is required to read and modify the JSON
file.
<add key="STF_JsonDirectoryPath" value="C:\STF" />
    <!--<add key="SFT_JsonDirectoryPath" value="\
\192.168.0.123\test123" />-->
    <add key="STF_JsonDirectoryUserName" value="Administrator" />
    <add key="STF_JsonDirectoryPassword" 
value="EAAAABrr9+MostHC4aldXRZl7DtgTQlxHzNUeCgRlNt4dweN" />
    <add key="STF_JsonDirectoryDomain" value="server08a" />
March 2, 2023, 715008535 Ver. 00
Page 17
--- Page 18 ---
3.6.7 Encryption of the Empower password in the JSON file
Security for the Empower password in the JSON file should also be considered. Passing the
password in plain text may not be acceptable. In the STF example, the password could be used
in plain text with value set to false or encrypted with the value set to true.
<add key="EmpowerJSONpwEncrypted" value="false" />
3.6.8 Log file
The log file forms an important component of any file transfer solution, providing the user visibility
and evidence of interface activity and reporting of exceptions. Log4net is used in the STF
example, and the log configuration settings are set in the STFTest.exe.config file. The following
flow diagram indicates the logging examples provided in the STF.
March 2, 2023, 715008535 Ver. 00
Page 18
--- Page 19 ---
Figure 3–3: Logging example
Example of the log output following successful JSON file processing:
2020-11-11 17:05:03,445 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Timer_Elapsed: service is not busy, there is no need to compare last 
iteration start time to current time... going straight to STF file 
process..
March 2, 2023, 715008535 Ver. 00
Page 19
--- Page 20 ---
2020-11-11 17:05:03,445 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Timer_Elapsed: starting new iteration at..11/11/2020 5:05:03 PM
2020-11-11 17:05:03,445 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Timer_Elapsed: starting... setting iteration busy flag to True...
2020-11-11 17:05:03,445 [6] INFO 
Common.Tools.Loggers.Log4NetLogger - Starting file deserialization 
C:\STF\int1234_standard_200929_1429.Tlck.json.
2020-11-11 17:05:03,445 [6] INFO Common.Tools.Loggers.Log4NetLogger 
- File deserialization C:\STF\int1234_standard_200929_1429.Tlck.json 
succeeded.
2020-11-11 17:05:03,445 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Validating file: C:\STF\int1234_standard_200929_1429.Tlck.json
2020-11-11 17:05:03,445 [6] INFO 
Common.Tools.Loggers.Log4NetLogger - File verification passed: 
C:\STF\int1234_standard_200929_1429.Tlck.json!
2020-11-11 17:05:04,131 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Common.ConnectToInstrumentAndWaitForConnection(acqServerNode=GrandicM, 
instrumenName=fake_2, timeoutSeconds=4)... step in...
2020-11-11 17:05:04,147 [6] INFO Common.Tools.Loggers.Log4NetLogger 
- Common.ConnectToInstrumentAndWaitForConnection()... loops before 
timeout: 20
2020-11-11 17:05:04,973 [6] INFO Common.Tools.Loggers.Log4NetLogger 
- Common.ConnectToInstrumentAndWaitForConnection()... Connection 
Succeeded
2020-11-11 17:05:07,548 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Saving successful:test_2610202_16. Adding update SSM to queue.
2020-11-11 17:05:08,905 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
SSM stored and submitted successfully to Empower: test_2610202_16.
2020-11-11 17:05:08,905 [6] INFO Common.Tools.Loggers.Log4NetLogger 
- Starting file object Serialization for 
C:\STF\int1234_standard_200929_1429.Tlck.json.
2020-11-11 17:05:08,905 [6] INFO Common.Tools.Loggers.Log4NetLogger 
- Object serialization succeeded for 
C:\STF\int1234_standard_200929_1429.Tlck.json.
2020-11-11 17:05:09,030 [6] INFO Common.Tools.Loggers.Log4NetLogger - 
Timer_Elapsed: finally... setting busy flag to False
3.6.8.1 Logging of JSON file process issues
Specific issues with the process—from deserialization of the JSON file, through SSM creation
and running in Empower, to reserializing the JSON file—must be handled and logged. The STF
shows some examples of capturing these errors but does not attempt to create full verbose
messages. It is expected that the level and verbosity will be created according to specific
requirements.
Here are some typical examples of failure mode logging from the STF example:
March 2, 2023, 715008535 Ver. 00
Page 20
--- Page 21 ---
• JSON file validation failure due to missing or incorrect header field
2020-11-11 17:03:48,297 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- JsonUtils.cs(75).Deserialize: Error occurred while Deserializing 
file: , ex=Object reference not set to an instance of an object.
2020-11-11 17:03:48,297 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- File not processed - deserialzation failure: Error occurred while 
Deserializing file: Object reference not set to an instance of an 
object. 
• Incorrect Oracle database alias
2020-11-11 17:03:20,576 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- Login() : Login failed.
• Missing or incorrect project name in Empower
2020-11-11 17:03:21,293 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- Login() : Project - Login: Invalid project name.
• Incorrect number of samples during SSM validation
2020-11-11 17:03:21,293 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- NumberOfSamples=9 in SampleSetDetailsData is not equal to 
jSONobject.SampleSetDetails.Samples.Count=8
• Missing or incorrect base SSM method name in the Empower project
2020-11-11 17:03:42,728 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- SampleSetMethod 'bad_base_SSM1' not exist!
2020-11-11 17:03:42,728 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- BaseSampleSetMethodName 'bad_base_SSM1' does not exist in the 
project.
• Locked base SSM in Empower
2020-11-11 17:03:48,095 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- EmpowerSampleSetMethod SaveSampleSetMethodLines: Method is 
permanently locked.
2020-11-11 17:03:48,095 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- Cannot save SSM: STF_locked_base_SSM1. Error: Method is 
permanently locked..
• Missing or incorrect system name in Empower
2020-11-11 17:03:49,062 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- Connect : Invalid value.
2020-11-11 17:03:49,062 [4] INFO Common.Tools.Loggers.Log4NetLogger 
- Common.ConnectToInstrumentAndWaitForConnection()... loops before 
timeout: 20
March 2, 2023, 715008535 Ver. 00
Page 21
--- Page 22 ---
2020-11-11 17:03:49,062 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- Connection status done : Instrument.Connect required.
2020-11-11 17:03:53,134 [4] ERROR Common.Tools.Loggers.Log4NetLogger 
- fake_3@Node2: Instrument connection timeout.
3.6.9 Password encryption
The STF example is designed to handle password encryption as described in the previous
sections. To enable manual encryption of the plain text password, the simple encryption
application can be provided. The following is an example of the encryption application:
Figure 3–4: Encrypt password
March 2, 2023, 715008535 Ver. 00
Page 22